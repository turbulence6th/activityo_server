c
APNS::Notification.public_methods
APNS::Notification.methods
APNS::Notification
APNS::Notification.attributes
APNS::Notification.methods
APNS::Notification
APNS.methods
APNS.inspect
APNS
Houston::Notification
Notification
c
next
apnsNotifications
apnsTokens
next
APNS.pem
next
c
step
c
follows
c
follows
c
event.startDate
c
event.startDate
c
event.startDate
c
event.startDate.in_time_zone('Turkey')
event.startDate
c
event.startDate
c
event
c
messagesResponse
c
messages.each do |m| p m end
messages
c
messages.each do |m| puts m end
messages
c
messages.each do |msg| puts msg end
messages.each do |msg|
messages
c
referencesResponse
c
referencesResponse
referensesResponse
c
referencesResponse
references
c
referencesResponse
references
c
referencesResponse
references
c
references
referencesResponse
c
references
referencesResponse
c
users
c
users
c
users
c
users
c
users
c
userEventResponse
c
userEventResponse.each do |s| puts s end
c
userEventResponse.each do |s| puts s end
userEventResponse
c
userEventResponse.each do |s| puts s end
userEventResponse.each do |s|
puts userEventResponse.inspect
puts userEventResponse
userEventResponse.inspect
userEventResponse
c
friendUser
friendUser.user_1
friendUser.accepted
friendUser
c
friendUser.accepted
u.accepted
u = User.first
friendUser.accepted
friendUser.accepte
friendUser.accepted
!friendUser.accepted
friendUser.accepted
friendUser
c
friend.errors
friend
c
userParams
c
userParams
exit
userParams
c
params[:event][:name]
params[:event]["name"]
params[:event]
JSON.parse(params[:event])
params[:event]
